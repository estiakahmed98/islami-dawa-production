// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model MasterTableDawa {
  id                      Int      @id @default(autoincrement())
  fullName                String
  role                    String
  division                String
  district                String
  upazila                 String
  tunion                  String
  markaz                  String
  phoneNumber             String
  email                   String   @unique
  password                String
  tahajjud                String?
  ayat                   String?
  zikir                   String?
  ishraq                  String?
  jamat                   String?
  sirat                   String?
  Dua                     String?
  ilm                     String?
  tasbih                  String?
  dayeeAmol               String?
  amoliSura               String?
  ayamroja                String?
  hijbulBahar             String?
  nonMuslimDawat          Int?
  murtadDawat             Int?
  alemderSatheyMojlish    Int?
  publicSatheyMojlish     Int?
  nonMuslimSaptahikGasht  Int?
  dawatterGuruttoMojlish  Int?
  mojlisheOnshogrohon     Int?
  prosikkhonKormoshalaAyojon Int?
  prosikkhonOnshogrohon   Int?
  jummahAlochona          Int?
  dhormoSova              Int?
  mashwaraPoint           Int?
  jamatBerHoise           Int?
  jamatSathi              Int?
  madrasaVisit            Int?
  moktobVisit             Int?
  schoolCollegeVisit      Int?
  sohojogiDayeToiri       Int?
  nonMuslimMuslimHoise    Int?
  murtadIslamFireche      Int?
  notunMoktobChalu        Int?
  totalMoktob             Int?
  totalStudent            Int?
  obhibhabokConference    Int?
  moktoThekeMadrasaAdmission Int?
  notunBoyoskoShikkha     Int?
  totalBoyoskoShikkha     Int?
  boyoskoShikkhaOnshogrohon Int?
  newMuslimeDinerFikir    Int?
  mohilaTalim             Int?
  mohilaOnshogrohon       Int?
}

model NewUser {
  id          Int      @id @default(autoincrement())
  fullName    String
  role        String
  division    String
  district    String
  upazila     String
  tunion      String
  markaz      String
  phoneNumber String
  email       String   @unique
  password    String
}

model AmoliMuhasabaData {
  id         Int    @id @default(autoincrement())
  tahajjud   String
  ayat       String
  zikir      String
  ishraq     String
  jamat      String
  sirat      String
  Dua        String
  ilm        String
  tasbih     String
  dayeeAmol  String
  amoliSura  String
  ayamroja   String
  hijbulBahar String
}

model DawatiBisoy {
  id                     Int @id @default(autoincrement())
  nonMuslimDawat         Int
  murtadDawat            Int
  alemderSatheyMojlish   Int
  publicSatheyMojlish    Int
  nonMuslimSaptahikGasht Int
}

model DawatiMojlish {
  id                          Int @id @default(autoincrement())
  dawatterGuruttoMojlish      Int
  mojlisheOnshogrohon         Int
  prosikkhonKormoshalaAyojon  Int
  prosikkhonOnshogrohon       Int
  jummahAlochona              Int
  dhormoSova                  Int
  mashwaraPoint               Int
}

model JamatBisoy {
  id           Int @id @default(autoincrement())
  jamatBerHoise Int
  jamatSathi    Int
}

model SoforBisoy {
  id                  Int @id @default(autoincrement())
  madrasaVisit        Int
  moktobVisit         Int
  schoolCollegeVisit  Int
}

model DayeBisoy {
  id                Int @id @default(autoincrement())
  sohojogiDayeToiri Int
}

model DinerDikeFireche {
  id                  Int @id @default(autoincrement())
  nonMuslimMuslimHoise Int
  murtadIslamFireche   Int
}

model MoktobBisoy {
  id                     Int @id @default(autoincrement())
  notunMoktobChalu       Int
  totalMoktob            Int
  totalStudent           Int
  obhibhabokConference   Int
  moktoThekeMadrasaAdmission Int
  notunBoyoskoShikkha    Int
  totalBoyoskoShikkha    Int
  boyoskoShikkhaOnshogrohon Int
  newMuslimeDinerFikir   Int
}

model TalimBisoy {
  id              Int @id @default(autoincrement())
  mohilaTalim     Int
  mohilaOnshogrohon Int
}
