generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  role          String?
  division      String?
  district      String?
  area          String?
  upazila       String?
  union         String?
  markaz        String?
  phone         String?
  parent        String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banned        Boolean?
  banReason     String?
  banExpires    Int?
  note          String?
  sessions      sessions[]
  accounts      accounts[]
  CalendarEvent CalendarEvent[]
  
  // Relations with new data models
  amoliData        AmoliMuhasaba[]
  dawatiBisoyData  DawatiBisoyRecord[]
  dawatiMojlishData DawatiMojlishRecord[]
  jamatBisoyData   JamatBisoyRecord[]
  dineFeraData     DineFeraRecord[]
  soforBisoyData   SoforBisoyRecord[]
  talimBisoyData   TalimBisoyRecord[]
  dayeRecords      DayeeBishoyRecord[]
  moktobBisoyData  MoktobBisoyRecord[]
  leaveRequests    LeaveRequest[]
  tasks            Task[]
  editRequests     EditRequest[]
}

model sessions {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model CalendarEvent {
  id            String   @id @default(cuid())
  googleEventId String   @unique
  calendarId    String
  title         String
  description   String?
  start         DateTime
  end           DateTime
  location      String?
  creator       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          users    @relation(fields: [userId], references: [id])
}

model accounts {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model verifications {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

// ============== AMOLI MUHASABA ==============
model AmoliMuhasaba {
  id          String   @id @default(cuid())
  userId      String
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime
  tahajjud    Int?     // Number value for tahajjud prayers
  surah       String?  // Surah name for tilawat
  ayat        String?  // Number of ayats read (can be range like "10-20")
  zikir       String?  // Morning/evening zikir status
  ishraq      String?  // Ishraq-Awwabin-Chasht prayers
  jamat       Int?     // Number of prayers in jamat
  sirat       String?  // Sirat book reading
  Dua         String?  // Dua Anas ibn Malik
  ilm         String?  // Islamic knowledge book reading
  tasbih      String?  // Three tasbih (morning-evening)
  dayeeAmol   String?  // Daee's practical book reading
  amoliSura   String?  // Daily practical surah reading
  ayamroja    String?  // Ayame Beej fasting
  hijbulBahar String?  // Daily Hijbul Bahar reading
  percentage  String?  // Overall percentage
  editorContent String? @db.Text // Rich text content for opinions/notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== DAWATI BISOY ==============
model DawatiBisoyRecord {
  id                     String   @id @default(cuid())
  userId                 String
  user                   users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date                   DateTime
  nonMuslimDawat         Int      @default(0)
  murtadDawat            Int      @default(0)
  alemderSatheyMojlish   Int      @default(0)
  publicSatheyMojlish    Int      @default(0)
  nonMuslimSaptahikGasht Int      @default(0)
  editorContent          String?  @db.Text
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== DAWATI MOJLISH ==============
model DawatiMojlishRecord {
  id                         String   @id @default(cuid())
  userId                     String
  user                       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date                       DateTime
  dawatterGuruttoMojlish     Int      @default(0)
  mojlisheOnshogrohon        Int      @default(0)
  prosikkhonKormoshalaAyojon Int      @default(0)
  prosikkhonOnshogrohon      Int      @default(0)
  jummahAlochona             Int      @default(0)
  dhormoSova                 Int      @default(0)
  mashwaraPoint              Int      @default(0)
  editorContent              String?  @db.Text
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== JAMAT BISOY ==============
model JamatBisoyRecord {
  id            String   @id @default(cuid())
  userId        String
  user          users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          DateTime
  jamatBerHoise Int      @default(0)
  jamatSathi    Int      @default(0)
  editorContent String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== DINE FERA ==============
model DineFeraRecord {
  id                   String   @id @default(cuid())
  userId               String
  user                 users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date                 DateTime
  nonMuslimMuslimHoise Int      @default(0)
  murtadIslamFireche   Int      @default(0)
  editorContent        String?  @db.Text
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== SOFOR BISOY ==============
model SoforBisoyRecord {
  id                 String   @id @default(cuid())
  userId             String
  user               users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date               DateTime
  madrasaVisit       Int      @default(0)
  moktobVisit        Int      @default(0)
  schoolCollegeVisit Int      @default(0)
  editorContent      String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== TALIM BISOY ==============
model TalimBisoyRecord {
  id                String   @id @default(cuid())
  userId            String
  user              users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date              DateTime
  mohilaTalim       Int      @default(0)
  mohilaOnshogrohon Int      @default(0)
  editorContent     String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== DAYEE BISOY ==============
model DayeeBishoyRecord {
  id                String          @id @default(cuid())
  userId            String
  user              users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  date              DateTime
  sohojogiDayeToiri Int             @default(0)
  editorContent     String?         @db.Text
  assistants        AssistantDaee[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model AssistantDaee {
  id                  String            @id @default(cuid())
  name                String
  phone               String
  address             String
  email               String?
  description         String?
  division            String
  district            String
  upazila             String
  union               String
  dayeeBishoyRecord   DayeeBishoyRecord @relation(fields: [dayeeBishoyId], references: [id], onDelete: Cascade)
  dayeeBishoyId       String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([dayeeBishoyId])
}

// ============== MOKTOB BISOY ==============
model MoktobBisoyRecord {
  id                         String   @id @default(cuid())
  userId                     String
  user                       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date                       DateTime
  notunMoktobChalu           Int      @default(0) // MoktobChalu
  totalMoktob                Int      @default(0) // NewMoktob
  totalStudent               Int      @default(0) // TotalStudent
  obhibhabokConference       Int      @default(0) // GurdianMeeting
  moktoThekeMadrasaAdmission Int      @default(0) // MoktobAdmit/MadrasahAdmit
  notunBoyoskoShikkha        Int      @default(0) // Sikkha
  totalBoyoskoShikkha        Int      @default(0) // TotalSikkha
  boyoskoShikkhaOnshogrohon  Int      @default(0) // TotalAgeSikkha
  newMuslimeDinerFikir       Int      @default(0) // NewMuslim
  editorContent              String?  @db.Text
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// ============== LEAVE MANAGEMENT ==============
model LeaveRequest {
  id          String   @id @default(cuid())
  userId      String
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   String   // Casual, Sick, Maternity, etc.
  fromDate    DateTime
  toDate      DateTime
  days        Int
  reason      String   @db.Text
  approvedBy  String?
  status      String   @default("pending") // pending, approved, rejected
  phone       String?
  name        String?
  requestDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([requestDate])
}

// ============== TASK MANAGEMENT ==============
model Task {
  id          String   @id @default(cuid())
  userId      String
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?  @db.Text
  date        DateTime
  time        String?
  visibility  String   @default("private") // private, public
  division    String?
  district    String?
  upazila     String?
  union       String?
  creatorRole String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([date])
  @@index([visibility])
  @@index([division, district, upazila, union])
}

// ============== EDIT REQUEST MANAGEMENT ==============
model EditRequest {
  id        String   @id @default(cuid())
  userId    String
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  name      String
  phone     String
  date      DateTime // The date for which edit is requested
  reason    String   @db.Text
  division  String
  district  String
  upazila   String
  union     String
  role      String
  status    String   @default("pending") // pending, approved, rejected, completed
  editedOnce Boolean @default(false) // Track if data has been edited once after approval
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([date])
}